package pt.ist.socialsoftware.edition.ldod.domain;

enum LdoDUser.SocialMediaService as SocialMediaService;
enum Role.RoleType as RoleType;
enum Member.MemberRole as MemberRole;
enum LdoDDate.DateType as DateType;
enum Fragment.PrecisionType as PrecisionType;
enum Source.SourceType as SourceType;
enum ManuscriptSource.Medium as Medium;
enum ManuscriptSource.Form as Form;
enum ManuscriptSource.Material as Material;
enum SpaceText.SpaceDim as SpaceDim;
enum SpaceText.SpaceUnit as SpaceUnit;
enum Rend.Rendition as Rendition;
enum AddText.Place as Place;
enum DelText.HowDel as HowDel;
enum TextPortion.VariationType as VariationType;
enum GapText.GapUnit as GapUnit;
enum GapText.GapReason as GapReason;
enum UnclearText.UnclearReason as UnclearReason;
enum AltText.AltMode as AltMode;
enum NoteText.NoteType as NoteType;
enum RefText.RefType as RefType;
enum ClassificationGame.ClassificationGameState as ClassificationGameState;

class LdoD {
	String title;
	String author;
	String editor;
	String sponsor;
	String principal;
	String funder;
	boolean admin;
}

class LastTwitterID {
	String lastBookParsedFile;
	long bookLastTwitterID;
	String lastPessoaParsedFile;
	long pessoaLastTwitterID;
	String lastBernardoParsedFile;
	long bernardoLastTwitterID;
	String lastVicenteParsedFile;
	long vicenteLastTwitterID;
}

relation LdoDHasLastTwitterID {
	LdoD playsRole ldoD {multiplicity 1..1;}
	LastTwitterID playsRole lastTwitterID {multiplicity 0..1;}
}

relation DomainRootHasLdoDApplication {
	.pt.ist.fenixframework.DomainRoot playsRole root {
		multiplicity 1..1;
	}
	LdoD playsRole ldoD {
		multiplicity 0..1;
	}
}

class UserConnection {
	String userId;
	String providerId;
	String providerUserId; 
	int rank;
	String displayName; 
	String profileUrl;
	String imageUrl;
	String accessToken; 
	String secret;
	String refreshToken; 
	Long expireTime;
}

relation LdoDHasUserConnections {
	LdoD playsRole ldoD {multiplicity 1..1;}
	UserConnection playsRole userConnection {multiplicity 0..*;}
}

class LdoDUser {
	boolean enabled;
	boolean active;
	String username;
	String password;
	String firstName;
	String lastName;
	String email;
	LocalDate lastLogin;
	SocialMediaService socialMediaService;
	String socialMediaId;
}

relation LdoDHasLdoDUsers {
	LdoD playsRole ldoD {multiplicity 1..1;}
	LdoDUser playsRole users {multiplicity 0..*;}
}

class RegistrationToken {
	String token;
	Long expireTime;
	boolean authorized;
}

relation LdoDHasRegistrationToken {
	LdoD playsRole ldoD {multiplicity 1..1;}
	RegistrationToken playsRole token {multiplicity 0..*;}
}

relation LdoDUserHasRegistrationToken {
	LdoDUser playsRole user {multiplicity 1..1;}
	RegistrationToken playsRole token {multiplicity 0..1;}
}

class Role {
	RoleType type;
}

relation LdoDHasRoles {
	LdoD playsRole ldoD {multiplicity 1..1;}
	Role playsRole roles {multiplicity 0..*;}
}

relation LdoDUsersAndRoles {
	LdoDUser playsRole users {multiplicity 0..*;}
	Role playsRole roles {multiplicity 0..*;}
}

class LdoDDate {
	LocalDate date;
	DateType type;
	PrecisionType precision;
}

class Edition {
	String xmlId;
	String title;
	LocalDate date;
	String acronym;
	Boolean pub;
}

class ExpertEdition extends Edition {
	String author;
	String editor;
}

class VirtualEdition extends Edition {
	String synopsis;
}

class NullEdition extends Edition;

relation VirtualEditionUsesEdition {
	VirtualEdition playsRole isUsedBy {multiplicity 0..*;}
	Edition playsRole uses {multiplicity 0..1;}
}

relation LdoDHasExpertEditions {
	LdoD playsRole ldoD4Expert {multiplicity 1..1;}
	ExpertEdition playsRole expertEditions {multiplicity 0..*;}
}

relation LdoDHasNullEdition {
	LdoD playsRole ldoD4NullEdition {multiplicity 1..1;}
	NullEdition playsRole nullEdition {multiplicity 0..1;}
}

relation LdoDHasVirtualEditions {
	LdoD playsRole ldoD4Virtual {multiplicity 1..1;}
	VirtualEdition playsRole virtualEditions {multiplicity 0..*;}
}

relation LdoDUserSelectsVirtualEditions {
	LdoDUser playsRole selectedBy {multiplicity 0..*;}
	VirtualEdition playsRole selectedVirtualEditions {multiplicity 0..*;}
}

class Member {	
	MemberRole role;
	LocalDate date;
	boolean active;
}

relation MemberHasLdoDUser {
	LdoDUser playsRole user {multiplicity 1..1;}
	Member playsRole member {multiplicity 0..*;}
}

relation MemberHasVirtualEdition {
	VirtualEdition playsRole virtualEdition {multiplicity 1..1;}
	Member playsRole member {multiplicity 0..*;}
}

class Taxonomy {
	String xmlId;
	boolean openManagement;
	boolean openVocabulary;
	boolean openAnnotation;
}

relation VirtualEditionHasTaxonomies {
	VirtualEdition playsRole edition {multiplicity 0..1;}
	Taxonomy playsRole taxonomy {multiplicity 0..1;}
}

class Category {
	String xmlId;
	String name;
}

relation TaxonomyHasCategories {
	Taxonomy playsRole taxonomy {multiplicity 1..1;}
	Category playsRole categories {multiplicity 0..*;}
}

class Heteronym {
	String xmlId;
	String name;
}

class NullHeteronym extends Heteronym;

relation LdoDHasHeteronyms {
	LdoD playsRole ldoD {multiplicity 1..1;}
	Heteronym playsRole heteronyms {multiplicity 0..*;}
}

class Fragment {
	String xmlId;
	String title;
}

relation LdoDHasFragments {
	LdoD playsRole ldoD {multiplicity 1..1;}
	Fragment playsRole fragments {multiplicity 0..*;}
}

class FragInter {
	String xmlId;
	int numAnnexNotes;
}

relation FragmentHasFragInters {
	Fragment playsRole fragment {multiplicity 1..1;}
	FragInter playsRole fragmentInter {multiplicity 0..*;}
}

relation FragInterAttributesHeteronym {
	FragInter playsRole fragInter {multiplicity 0..*;}
	Heteronym playsRole heteronym {multiplicity 0..1;}
}

relation FragInterHasDate {
	FragInter playsRole fragInter {multiplicity 0..1;}
	LdoDDate playsRole ldoDDate {multiplicity 0..1;}
}

class AnnexNote {
	int number;
}

relation FragInterHasAnnexNote {
	FragInter playsRole fragInter {multiplicity 1..1;}
	AnnexNote playsRole annexNote {multiplicity 0..*;}
}

class ExpertEditionInter extends FragInter {
	String title;
	String volume;
	int number;
	String subNumber;
	int startPage;
	int endPage;
	String notes;
}

class VirtualEditionInter extends FragInter {
	int number;
}

relation VirtualEditionInterUsesFragInter {
	VirtualEditionInter playsRole isUsedBy {multiplicity 0..*;}
	FragInter playsRole uses {multiplicity 1..1;}
}

class SourceInter extends FragInter;

relation ExpertEditionHasExpertEditionInters {
	ExpertEdition playsRole expertEdition {multiplicity 1..1;}
	ExpertEditionInter playsRole expertEditionInters {multiplicity 0..*;}
}

class Source {
	String xmlId;
	SourceType type;
	String settlement;
	String repository;
	String idno;
	String altIdentifier;
}

relation FragmentHasSources {
	Fragment playsRole fragment {multiplicity 1..1;}
	Source playsRole sources {multiplicity 0..*;}
}

relation SourceHasSourceInters {
	Source playsRole source {multiplicity 1..1;}
	SourceInter playsRole sourceInters {multiplicity 0..*;}
}

relation SourceHasDate {
	Source playsRole source {multiplicity 0..1;}
	LdoDDate playsRole ldoDDate {multiplicity 0..1;}
}

relation SourceHasHeteronym {
	Source playsRole source {multiplicity 0..*;}
	Heteronym playsRole heteronym {multiplicity 0..1;}
}

class ManuscriptSource extends Source {
	Form form;
	Material material;
	int columns;
	Boolean hasLdoDLabel;
	String notes;
}

class Dimensions {
	float height;
	float width;
	int position;
}

relation ManuscriptSourceHasDimensions {
	ManuscriptSource playsRole manuscriptSource {multiplicity 1..1;}
	Dimensions playsRole dimensions {multiplicity 0..*;}
}


class Tag;

relation Tag2Category {
	Tag playsRole tag {multiplicity 0..*;}
	Category playsRole category {multiplicity 1..1;}
}

relation Tag2VirtualEditionInter {
	Tag playsRole tag {multiplicity 0..*;}
	VirtualEditionInter playsRole inter {multiplicity 1..1;}
}

relation TagHasContributor {
	Tag playsRole tag {multiplicity 0..*;}
	LdoDUser playsRole contributor {multiplicity 0..1;}
}

class PhysNote {
	Medium medium;
	String note;
}

class HandNote extends PhysNote;

class TypeNote extends PhysNote;

relation ManuscriptSourceHasHandNote {
	ManuscriptSource playsRole manuscript {multiplicity 1..1;}
	HandNote playsRole handNote {multiplicity 0..*;}
}

relation ManuscriptSourceHasTypeNote {
	ManuscriptSource playsRole manuscript {multiplicity 1..1;}
	TypeNote playsRole typeNote {multiplicity 0..*;}
}

class PrintedSource extends Source {
	String title;
	String journal;
	String issue;
	String pubPlace;
	int startPage;
	int endPage;
}

class Facsimile {
	String xmlId;
}

relation SourceHasFacsimile {
	Source playsRole source {multiplicity 1..1;}
	Facsimile playsRole facsimile {multiplicity 0..1;}
}

class Surface {
	String xmlId;
	String graphic;
}

relation FacsimileHasSurface {
	Facsimile playsRole facsimile {multiplicity 0..1;}
	Surface playsRole firstSurface {multiplicity 0..1;}
}

relation SurfaceNextSurface {
	Surface playsRole next {multiplicity 0..1;}
	Surface playsRole prev {multiplicity 0..1;}
}

class TextPortion {
	String xmlId;
}

relation FragmentHasTextPortion {
	Fragment playsRole fragment {multiplicity 0..1;}
	TextPortion playsRole textPortion {multiplicity 0..1;}
}

relation PhysNoteRefersTextPortion {
	PhysNote playsRole physNote {multiplicity 0..*;}
	TextPortion playsRole textPortion {multiplicity 0..*;} 
}

class Rend {
	Rendition rend;
}

relation TextPortionHasRend {
	TextPortion playsRole text {multiplicity 0..1;}
	Rend playsRole rend {multiplicity 0..*;}
}

class RdgText extends TextPortion {
	VariationType type;
}

relation TextPortionHasNextTextPortion {
	TextPortion playsRole prevText {multiplicity 0..1;}
	TextPortion playsRole nextText {multiplicity 0..1;}
}

relation TextPortionContainsTextPortion {
	TextPortion playsRole childText {multiplicity 0..*;}
	TextPortion playsRole parentText {multiplicity 0..1;}
}

relation TextPortionContainsFirstTextPortion {
	TextPortion playsRole firstChildText {multiplicity 0..1;}
	TextPortion playsRole parentOfFirstText {multiplicity 0..1;}
}

relation TextPortionContainsLastTextPortion {
	TextPortion playsRole lastChildText {multiplicity 0..1;}
	TextPortion playsRole parentOfLastText {multiplicity 0..1;}
}

class RdgGrpText extends TextPortion {
  VariationType type;
}

class AppText extends TextPortion {
  VariationType type;
}

relation FragInterHasRdgTexts {
	FragInter playsRole fragInters {multiplicity 0..*;}
	RdgText playsRole rdg {multiplicity 0..*;}
}

class SimpleText extends TextPortion {
	String value;
}

class SegText extends TextPortion;

class AltText extends TextPortion {
	AltMode mode;
}

class AltTextWeight {
	double weight;
}

relation AltTextHasAltTextWeight {
	AltText playsRole altText {multiplicity 0..1;}
	AltTextWeight playsRole altTextWeight {multiplicity 0..*;}
}


relation AltTexWeightHasSegText {
	AltTextWeight playsRole altTextWeight {multiplicity 0..1;}
	SegText playsRole segText {multiplicity 0..1;}
}

class LbText extends TextPortion {
	Boolean breakWord;
	Boolean hyphenated;
}

relation LbTextHasFragInters {
	LbText playsRole lbText {multiplicity 0..*;}
	FragInter playsRole fragInter {multiplicity 0..*;}
}

class PbText extends TextPortion {
	int order;
}

relation PbTextHasFragInters {
	PbText playsRole pbText {multiplicity 0..*;}
	FragInter playsRole fragInter {multiplicity 0..*;}
}

relation PbTextSurface {
	PbText playsRole pbText {multiplicity 0..*;}
	Surface playsRole surface {multiplicity 0..1;}
}

class SpaceText extends TextPortion {
	SpaceDim dim;
	int quantity;
	SpaceUnit unit;
}

class ParagraphText extends TextPortion {
}

class AddText extends TextPortion {
	Place place;
}

class DelText extends TextPortion {
	HowDel how;
}

class SubstText extends TextPortion {
}

class GapText extends TextPortion {
	GapReason reason;
	GapUnit unit;
	int extent;
} 

class UnclearText extends TextPortion {
	UnclearReason reason;
}

class NoteText extends TextPortion {
	NoteType type;
}

relation AnnexNoteHasTextNote {
	AnnexNote playsRole annexNote {multiplicity 0..*;}
	NoteText playsRole noteText {multiplicity 1..1;}
}

class RefText extends TextPortion {
	String target;
	RefType type;
}

relation RefText2Surface {
	Surface playsRole surface {multiplicity 0..1;}
	RefText playsRole refText {multiplicity 0..*;}
}

relation RefText2FragInter {
	FragInter playsRole fragInter {multiplicity 0..1;}
	RefText playsRole refText {multiplicity 0..*;}
}

relation RefText2Fragment {
	Fragment playsRole refFrag {multiplicity 0..1;}
	RefText playsRole refText {multiplicity 0..*;}
}

class Annotation {
	String quote;
	String text;
}

class HumanAnnotation extends Annotation;

class AwareAnnotation extends Annotation;

relation HumanAnnotationHasBeginSimpleText {
	HumanAnnotation playsRole startAnnotations {multiplicity 0..*;}
	SimpleText playsRole startText {multiplicity 0..1;}
}

relation HumanAnnotationHasEndSimpleText {
	HumanAnnotation playsRole endAnnotations {multiplicity 0..*;}
	SimpleText playsRole endText {multiplicity 0..1;}
}

relation VirtualEditionInterHasAnnotations {
  VirtualEditionInter playsRole virtualEditionInter {multiplicity 1..1;}
  Annotation playsRole annotation {multiplicity 0..*;}
}

relation LdoDUserWritesAnnotations {
	LdoDUser playsRole user {multiplicity 1..1;}
	Annotation playsRole annotation {multiplicity 0..*;}
}

class Range {
  String start;
  int startOffset;
  String end;
  int endOffset;
}	

relation AnnotationHasRanges {
  Annotation playsRole annotation {multiplicity 1..1;}
  Range playsRole range {multiplicity 0..*;}
}

relation HumanAnnotationHasTags {
  HumanAnnotation playsRole annotation {multiplicity 0..1;}
  Tag playsRole tag {multiplicity 0..*;}
}

class RecommendationWeights {
	double heteronymWeight;
	double dateWeight;
	double textWeight;
	double taxonomyWeight;
}

relation LdoDUserHasRecommendationWeights {
	LdoDUser playsRole user {multiplicity 1..1;}
	RecommendationWeights playsRole recommendationWeights {multiplicity 0..*;}
}

relation VirtualEditionHasRecommendationWeights {
	VirtualEdition playsRole virtualEdition {multiplicity 1..1;}
	RecommendationWeights playsRole recommendationWeights {multiplicity 0..*;}
}

class Section {
	String title;
	int number;
}

relation VirtualEditionHasSections {
	VirtualEdition playsRole virtualEdition {multiplicity 0..1;}
	Section playsRole sections {multiplicity 1..*;}
}

relation SectionHasSections{
	Section playsRole parentSection {multiplicity 0..1;}
	Section playsRole subSections {multiplicity 0..*;}
}

relation SectionHasVitualEditionInters{
	Section playsRole section {multiplicity 1..1;}
	VirtualEditionInter playsRole VirtualEditionInter {multiplicity 0..*;}
}

class Citation {
	String sourceLink;
	String date;
	String fragText;	
}

class TwitterCitation extends Citation {
	String tweetText;
	long tweetID;
	String location;
	String country;
	String username;
	String userProfileURL;
	String userImageURL;
}

relation CitationHasAwareAnnotations {
	AwareAnnotation playsRole awareAnnotation {multiplicity 0..*;}
	Citation playsRole citation {multiplicity 1..1;}
}

relation FragmentHasCitations {
	Citation playsRole citation {multiplicity 0..*;}
	Fragment playsRole fragment {multiplicity 1..1;}
}

class InfoRange {
	String start;
  	int startOffset;
  	String end;
  	int endOffset;
  	String quote;
	String text;
}

relation CitationHasInfoRanges {
	Citation playsRole citation {multiplicity 1..1;}
	InfoRange playsRole infoRange {multiplicity 0..*;}
}

relation InfoRangeHasFragInter {
	InfoRange playsRole infoRange {multiplicity 0..*;}
	FragInter playsRole fragInter {multiplicity 1..1;}
}

class SocialMediaCriteria;

class MediaSource extends SocialMediaCriteria {
	String name;
}

class TimeWindow extends SocialMediaCriteria {
	LocalDate beginDate;
	LocalDate endDate;
}

class GeographicLocation extends SocialMediaCriteria {
	String location;
	String country;
}

class Frequency extends SocialMediaCriteria {
	int frequency;
}

relation VirtualEditionHasSocialMediaCriteria {
	VirtualEdition playsRole virtualEdition {multiplicity 1..1;}
	SocialMediaCriteria playsRole criteria {multiplicity 0..4;}
}

class Tweet {
	String sourceLink;
	String date;
	String tweetText;
	long tweetID;
	String location;
	String country;
	String username;
	String userProfileURL;
	String userImageURL;
	long originalTweetID;
	boolean isRetweet;
}

relation TwitterCitationHasTweets {
	TwitterCitation playsRole citation {multiplicity 0..1;}
	Tweet playsRole tweet {multiplicity 0..*;}
}

relation LdoDHasTweets {
	LdoD playsRole ldoD {multiplicity 1..1;}
	Tweet playsRole tweet {multiplicity 0..*;}
}

class ClassificationGame {
    ClassificationGameState state;
	String description;
	DateTime dateTime;
	boolean sync;
}

class Player {
	double score;
}

class ClassificationGameRound {
    int number;
    int round;
    String tag;
    double vote;
    DateTime time;
}

class ClassificationGameParticipant {
    boolean winner;
    double score;
}

relation VirtualEditionHasClassificationGames {
	VirtualEdition playsRole virtualEdition {multiplicity 1..1;}
	ClassificationGame playsRole classificationGame {multiplicity 0..*;}
}

relation LdoDUserOwnsClassificationGame {
	ClassificationGame playsRole responsibleForGames {multiplicity 0..*;}
	LdoDUser playsRole responsible {multiplicity 1..1;} 
}

relation ClassificationGameForVirtualEditionInter {
	ClassificationGame playsRole classificationGame {multiplicity 0..*;}
	VirtualEditionInter playsRole virtualEditionInter {multiplicity 1..1;}
}

relation LdodUserIsPlayer {
	LdoDUser playsRole user {multiplicity 1..1;}
	Player playsRole player {multiplicity 0..1;}
}

relation ClassificationGameProducesTag {
	ClassificationGame playsRole classificationGame {multiplicity 0..1;}
	Tag playsRole tag {multiplicity 0..1;}
}

relation ClassificationGameParticipantIsPlayer {
	ClassificationGameParticipant playsRole classificationGameParticipant {multiplicity 0..*;}
	Player playsRole player {multiplicity 1..1;}
}

relation ClassificationGameParticipantInGame {
	ClassificationGameParticipant playsRole classificationGameParticipant {multiplicity 0..*;}
	ClassificationGame playsRole classificationGame {multiplicity 1..1;}
}

relation ClassificationGameParticipantInGameRounds {
	ClassificationGameParticipant playsRole classificationGameParticipant {multiplicity 1..1;}
	ClassificationGameRound playsRole classificationGameRound {multiplicity 0..*;}
}