"use strict";
/* eslint-disable filenames/match-exported */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const JestUtil = __importStar(require("jest-util"));
const jest_mock_1 = require("jest-mock");
const fake_timers_1 = require("@jest/fake-timers");
const happy_dom_1 = require("happy-dom");
/**
 * Happy DOM Jest Environment.
 */
class HappyDOMEnvironment {
    /**
     * Constructor.
     *
     * @param config Jest config.
     * @param options Options.
     */
    constructor(config, options) {
        this.fakeTimers = null;
        this.fakeTimersModern = null;
        this.window = new happy_dom_1.Window();
        this.global = this.window;
        this.moduleMocker = new jest_mock_1.ModuleMocker(this.window);
        // Node's error-message stack size is limited to 10, but it's pretty useful to see more than that when a test fails.
        this.global.Error.stackTraceLimit = 100;
        // TODO: Remove this ASAP as it currently causes tests to run really slow.
        this.global.Buffer = Buffer;
        // Needed as Jest is using it
        this.window['global'] = this.global;
        JestUtil.installCommonGlobals(this.window, config.globals);
        if (options && options.console) {
            this.global.console = options.console;
            this.global.window['console'] = options.console;
        }
        this.fakeTimers = new fake_timers_1.LegacyFakeTimers({
            config,
            global: this.window,
            moduleMocker: this.moduleMocker,
            timerConfig: {
                idToRef: (id) => id,
                refToId: (ref) => ref
            }
        });
        this.fakeTimersModern = new fake_timers_1.ModernFakeTimers({
            config,
            global: this.window
        });
    }
    /**
     * Setup.
     *
     * @returns Promise.
     */
    async setup() { }
    /**
     * Teardown.
     *
     * @returns Promise.
     */
    async teardown() {
        this.fakeTimers.dispose();
        this.fakeTimersModern.dispose();
        this.global.happyDOM['cancelAsync']();
        this.global = null;
        this.moduleMocker = null;
        this.fakeTimers = null;
        this.fakeTimersModern = null;
    }
    /**
     * Runs a script.
     *
     * @param script Script.
     * @returns Result.
     */
    runScript(script) {
        return script.runInContext(this.global);
    }
    /**
     * Returns the VM context.
     *
     * @returns Context.
     */
    getVmContext() {
        return this.global;
    }
}
exports.default = HappyDOMEnvironment;
//# sourceMappingURL=index.js.map