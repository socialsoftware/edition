import*as t from"@vendor/@popperjs/core_2.11.6/dist/umd/popper.min.js";let e;e=Popper?Popper.createPopper:t?.createPopper;class o extends HTMLElement{constructor(){super()}get show(){return this.hasAttribute("show")}get content(){return this.querySelector("[ldod-popover]")}static get observedAttributes(){return["show"]}get options(){return{strategy:"fixed",placement:"bottom",modifiers:[{name:"offset",options:{offset:[this.dataset.skidding||0,this.dataset.distance||8]}}]}}getComponent=()=>{const t=this.element();return t.lastElementChild.toggleAttribute("ldod-popover"),t.children};connectedCallback(){this.innerHTML="<style>[ldod-popover]{display:none}[ldod-popover][show]{display:block}\n</style>",window.addEventListener("click",this.hidePopover)}hidePopover=({target:t})=>{t.hasAttribute("open-popover")||this.toggleAttribute("show",!1)};attributeChangedCallback(t,e,o){this.handleChangeAttribute[t]()}handleChangeAttribute={show:()=>{if(!this.show)return this.content.remove();this.append(...this.getComponent()),this.content.toggleAttribute("show"),this.update()}};disconnectedCallback(){window.removeEventListener("click",this.hidePopover)}update=()=>{this.target&&e(this.target,this.content,this.options).update()}}!customElements.get("ldod-popover")&&customElements.define("ldod-popover",o);class i extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=new CSSStyleSheet;t.replaceSync('#tooltip{padding:4px 8px;font-size:13px;border-radius:4px;display:none;text-align:justify;z-index:1070;box-shadow:0 0 10px #00000040}[dark]{font-weight:700;background:#333;color:#fff}[light]{font-weight:400;background-color:#fff;color:#000;border:1px solid lightgrey}#tooltip[data-show]{display:block}#arrow,#arrow:before{position:absolute;width:8px;height:8px;background:inherit;border:inherit}#arrow{visibility:hidden}#arrow:before{visibility:visible;content:"";transform:rotate(45deg)}#tooltip[data-popper-placement=top] #arrow{bottom:-4px}#tooltip[data-popper-placement=bottom] #arrow{top:-4px}#tooltip[data-popper-placement=left] #arrow{right:-4px}#tooltip[data-popper-placement=right] #arrow{left:-4px}#tooltip[light][data-popper-placement=top] #arrow{bottom:-6px;border-top:none;border-left:none}#tooltip[light][data-popper-placement=bottom] #arrow{top:-6px;border-bottom:none;border-right:none}\n'),this.shadowRoot.adoptedStyleSheets=[t],this.shadowRoot.innerHTML='\n<div id="tooltip" role="tooltip" dark>\n<div id="arrow" data-popper-arrow></div>\n<span id="content"></span>\n</div>'}get element(){return this.getRootNode().querySelector(this.dataset.ref)}get tooltip(){return this.shadowRoot.querySelector("#tooltip")}get placement(){return this.getAttribute("placement")??"bottom"}isLightTheme(){return this.hasAttribute("light")}setLightTheme(){this.tooltip.toggleAttribute("dark",!1),this.tooltip.toggleAttribute("light",!0)}get options(){return{strategy:"fixed",placement:this.placement,modifiers:[{name:"offset",options:{offset:[0,8]}}]}}get content(){return this.getAttribute("content")||this.dataset.content}get instance(){return e(this.element,this.tooltip,this.options)}static get observedAttributes(){return["content"]}connectedCallback(){this.addEventListeners(),this.render()}render(){this.isLightTheme()&&this.setLightTheme(),this.tooltip.style.maxWidth=this.getAttribute("width"),this.tooltip.querySelector("#content").textContent=this.content}attributeChangedCallback(t,e,o){"content"===t&&e&&e!==o&&this.render()}disconnectedCallback(){this.removeEventListeners()}addEventListeners(){["mouseenter","focus"].forEach((t=>this.element?.addEventListener(t,this.show))),["mouseleave","blur"].forEach((t=>this.element?.addEventListener(t,this.hide)))}removeEventListeners(){["mouseenter","focus"].forEach((t=>{this.element?.removeEventListener(t,this.show)})),["mouseleave","blur"].forEach((t=>this.element?.removeEventListener(t,this.hide)))}show=()=>{this.tooltip.toggleAttribute("data-show",!0),this.instance.setOptions((t=>({...t,modifiers:[...t.modifiers,{name:"eventListeners",enabled:!0}]}))),this.instance.update()};hide=()=>{this.tooltip.toggleAttribute("data-show",!1),this.instance.setOptions((t=>({...t,modifiers:[...t.modifiers,{name:"eventListeners",enabled:!1}]})))}}!customElements.get("ldod-tooltip")&&customElements.define("ldod-tooltip",i);
