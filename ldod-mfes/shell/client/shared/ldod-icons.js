const t=new DOMParser,e=async e=>(e=>t.parseFromString(e,"image/svg+xml"))(window.LDOD_PRODUCTION?(await import(`@shared/icons/${e}.js`)).default:(await import(`./icons/${e}.js`)).default).firstChild,i=":host{display:inline-block;background-repeat:no-repeat;background-position:center;vertical-align:middle}\n";class n extends HTMLSpanElement{constructor(){super(),this.attachShadow({mode:"open"}),this.sheet=new CSSStyleSheet,this.sheet.replaceSync(i),this.shadowRoot.adoptedStyleSheets=[this.sheet]}get icon(){return this.getAttribute("icon")}get fill(){return this.getAttribute("fill")||"#6c757d"}get hoverIcon(){return this.getAttribute("hover-icon")||this.icon}get hoverFill(){return this.getAttribute("hover-fill")||this.fill}get size(){return this.getAttribute("size")||"24px"}setFillColor(t,e){return t.querySelector("path").setAttribute("fill",e),t}async connectedCallback(){const t=this.setFillColor(await e(this.icon),this.fill),n=this.setFillColor(await e(this.hoverIcon),this.hoverFill);this.sheet.replaceSync(i+((t,e,i)=>`\n:host {\n    --icon-background: url(data:image/svg+xml,${encodeURIComponent(t)});\n\tbackground-image: var(--icon-background);\n\tmin-width: ${i};\n\tmin-height: ${i};\n\tbackground-size: ${i};\n}\n:host(:hover) {\n    --icon-background: url(data:image/svg+xml,${encodeURIComponent(e)});\n}\n`)(t.outerHTML,n.outerHTML,this.size))}}!customElements.get("ldod-span-icon")&&customElements.define("ldod-span-icon",n,{extends:"span"});export{n as LdodSpanIcon};
//# sourceMappingURL=ldod-icons.js.map
